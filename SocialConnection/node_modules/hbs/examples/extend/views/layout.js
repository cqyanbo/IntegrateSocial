define(['handlebars'], function(Handlebars) {
return Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, stack2, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  buffer += "<!doctype html>\n\n<html>\n\n<head>\n  <title>";
  if (stack1 = helpers.title) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.title; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "</title>\n\n  <link rel='stylesheet' href='/css/style.css'>\n\n  ";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers.block || depth0.block),stack1 ? stack1.call(depth0, "stylesheets", options) : helperMissing.call(depth0, "block", "stylesheets", options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n</head>\n\n<body>\n  body: ";
  if (stack2 = helpers.body) { stack2 = stack2.call(depth0, {hash:{},data:data}); }
  else { stack2 = depth0.body; stack2 = typeof stack2 === functionType ? stack2.apply(depth0) : stack2; }
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n\n  <hr/>\n  post body\n  <hr/>\n\n  ";
  options = {hash:{},data:data};
  stack2 = ((stack1 = helpers.block || depth0.block),stack1 ? stack1.call(depth0, "scripts", options) : helperMissing.call(depth0, "block", "scripts", options));
  if(stack2 || stack2 === 0) { buffer += stack2; }
  buffer += "\n</body>\n\n</html>\n";
  return buffer;
  })
});